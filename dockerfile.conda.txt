# Dockerfile.conda
# Multi-stage Docker build for Enhanced Bathymetric CAE Processing
# Uses conda-forge for reliable GDAL installation

ARG PYTHON_VERSION=3.11

# Use mambaforge as base for faster conda operations
FROM condaforge/mambaforge:latest AS base

LABEL maintainer="Enhanced Bathymetric CAE Team"
LABEL description="Enhanced Bathymetric CAE Processing with GDAL support"
LABEL version="2.0.0"

# Set working directory
WORKDIR /app

# Set environment variables
ENV CONDA_DEFAULT_ENV=bathymetric-cae
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Optimize conda/mamba
ENV MAMBA_NO_BANNER=1
ENV CONDA_ALWAYS_YES=true

# GDAL optimization
ENV GDAL_CACHEMAX=1024
ENV GDAL_NUM_THREADS=ALL_CPUS
ENV GDAL_DISABLE_READDIR_ON_OPEN=EMPTY_DIR

# TensorFlow optimization
ENV TF_CPP_MIN_LOG_LEVEL=2
ENV TF_FORCE_GPU_ALLOW_GROWTH=true

# =============================================================================
# Development stage
# =============================================================================
FROM base AS development

# Copy environment file first (for Docker layer caching)
COPY environment.yml .

# Create conda environment
RUN mamba env create -f environment.yml && \
    mamba clean --all --yes && \
    conda init bash

# Activate environment in shell
SHELL ["conda", "run", "-n", "bathymetric-cae", "/bin/bash", "-c"]

# Copy source code
COPY . .

# Install package in development mode
RUN pip install -e . --no-deps

# Install additional dev dependencies
RUN pip install -r tests/requirements-test.txt

# Create required directories
RUN mkdir -p logs plots expert_reviews test_data models

# Verify installation
RUN python -c "from osgeo import gdal; print(f'GDAL {gdal.__version__} ready')" && \
    python -c "import enhanced_bathymetric_cae; print('Package imported successfully')" && \
    bathymetric-cae --version

# =============================================================================
# Testing stage
# =============================================================================
FROM development AS testing

# Run comprehensive tests
RUN python tests/run_tests_advanced.py --quick && \
    echo "✅ All tests passed"

# Generate test data for validation
RUN python -c "
from tests.test_fixtures.sample_data_generator import TestDataGenerator
from pathlib import Path
TestDataGenerator.create_test_dataset(Path('test_data'), 3)
print('✅ Test data generated')
"

# =============================================================================
# Production stage
# =============================================================================
FROM base AS production

# Copy environment file
COPY environment.yml .

# Create optimized conda environment for production
RUN mamba env create -f environment.yml && \
    mamba clean --all --yes && \
    # Remove unnecessary packages for production
    conda run -n bathymetric-cae mamba remove --yes \
        pytest pytest-cov pytest-html pytest-mock pytest-xdist \
        black flake8 isort memory-profiler && \
    mamba clean --all --yes

# Activate environment
SHELL ["conda", "run", "-n", "bathymetric-cae", "/bin/bash", "-c"]

# Copy only necessary files for production
COPY config/ config/
COPY core/ core/
COPY models/ models/
COPY processing/ processing/
COPY review/ review/
COPY utils/ utils/
COPY cli/ cli/
COPY main.py .
COPY setup.py .
COPY requirements.txt .
COPY README.md .
COPY LICENSE .

# Install package
RUN pip install . --no-deps

# Create required directories
RUN mkdir -p logs plots expert_reviews models

# Create non-root user for security
RUN groupadd -r bathymetric && \
    useradd -r -g bathymetric -d /app -s /bin/bash bathymetric && \
    chown -R bathymetric:bathymetric /app

# Switch to non-root user
USER bathymetric

# Verify production installation
RUN python -c "from osgeo import gdal; print(f'GDAL {gdal.__version__} ready')" && \
    bathymetric-cae --version

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD python -c "from osgeo import gdal; import enhanced_bathymetric_cae" || exit 1

# Expose any ports if needed (none for CLI tool)
# EXPOSE 8080

# Set default command
ENTRYPOINT ["conda", "run", "--no-capture-output", "-n", "bathymetric-cae"]
CMD ["bathymetric-cae", "--help"]

# =============================================================================
# GPU stage (optional)
# =============================================================================
FROM nvidia/cuda:11.8-runtime-ubuntu22.04 AS gpu-base

# Install miniconda
RUN apt-get update && \
    apt-get install -y wget && \
    wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh && \
    bash Miniconda3-latest-Linux-x86_64.sh -b -p /opt/conda && \
    rm Miniconda3-latest-Linux-x86_64.sh && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

ENV PATH="/opt/conda/bin:$PATH"

WORKDIR /app

# Copy environment file with GPU support
COPY environment.yml .

# Create environment with GPU TensorFlow
RUN conda env create -f environment.yml && \
    conda run -n bathymetric-cae pip install tensorflow[and-cuda]>=2.13.0 && \
    conda clean --all --yes

SHELL ["conda", "run", "-n", "bathymetric-cae", "/bin/bash", "-c"]

# Copy source and install
COPY . .
RUN pip install . --no-deps

# Verify GPU setup
RUN python -c "
import tensorflow as tf
print(f'TensorFlow {tf.__version__}')
print(f'GPUs available: {len(tf.config.list_physical_devices(\"GPU\"))}')
from osgeo import gdal
print(f'GDAL {gdal.__version__} ready')
"

ENTRYPOINT ["conda", "run", "--no-capture-output", "-n", "bathymetric-cae"]
CMD ["bathymetric-cae", "--help"]